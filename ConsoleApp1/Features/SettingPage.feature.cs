// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ConsoleApp1.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SettingPage")]
    public partial class SettingPageFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SettingPage.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SettingPage", "A short summary of the feature", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update setting page with valid data")]
        [NUnit.Framework.CategoryAttribute("tag1")]
        public virtual void UpdateSettingPageWithValidData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update setting page with valid data", new string[] {
                        "tag1"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I am on the login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "password"});
            table1.AddRow(new string[] {
                        "test002",
                        "Test1234"});
#line 8
 testRunner.And("login", ((string)(null)), table1, "And ");
#line 11
 testRunner.And("I am on the Setting page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Gender",
                        "ID",
                        "Phone",
                        "Company",
                        "Job",
                        "Title",
                        "Signature",
                        "Profile",
                        "PersonalWebsite",
                        "Weibo",
                        "Wechat",
                        "QQ"});
            table2.AddRow(new string[] {
                        "Knox",
                        "male",
                        "520111199011111111",
                        "0211988587",
                        "Steam",
                        "Tester",
                        "Boss",
                        "Hello guys",
                        "Hello again",
                        "http://baidu.com",
                        "http://weibo.com",
                        "knoxwang",
                        "178178178"});
#line 12
 testRunner.When("I update date with", ((string)(null)), table2, "When ");
#line 15
 testRunner.Then("I can see \"基础信息保存成功。\" message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update setting page with invalid data")]
        public virtual void UpdateSettingPageWithInvalidData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update setting page with invalid data", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("I am on the login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "password"});
            table3.AddRow(new string[] {
                        "test002",
                        "Test1234"});
#line 19
 testRunner.And("login", ((string)(null)), table3, "And ");
#line 22
 testRunner.And("Click personalsetting page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Gender",
                        "ID",
                        "Phone",
                        "Company",
                        "Job",
                        "Title",
                        "Signature",
                        "Profile",
                        "PersonalWebsite",
                        "Weibo",
                        "Wechat",
                        "QQ"});
            table4.AddRow(new string[] {
                        "KnoxKnoxKnoxKnoxKnox",
                        "male",
                        "1234",
                        "4321",
                        "Steam",
                        "Tester",
                        "BossBossBossBossBossBossBoss",
                        "Hello guys",
                        "Hello again",
                        "1234",
                        "3213",
                        "knoxwang",
                        "qwer"});
#line 23
 testRunner.When("Update data with", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "error"});
            table5.AddRow(new string[] {
                        "最多只能输入 18 个字符"});
            table5.AddRow(new string[] {
                        "请正确输入您的身份证号码"});
            table5.AddRow(new string[] {
                        "请输入正确的手机号"});
            table5.AddRow(new string[] {
                        "最多只能输入 24 个字符"});
            table5.AddRow(new string[] {
                        "地址不正确，须以http://或者https://开头。"});
            table5.AddRow(new string[] {
                        "地址不正确，须以http://或者https://开头。"});
            table5.AddRow(new string[] {
                        "请输入正确的QQ号"});
#line 26
 testRunner.Then("I see errors", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
